// 点类
class point {
    var x = 0;
    var y = 0;
    function point(x = 0, y = 0){
        this.x = x;
        this.y = y;
    }
}

// 笛卡尔坐标系类
class Cartesian {
    // 坐标原点所在的left ，top值
    var left = 0;
    var top = 0;
    function Cartesian(left = 0, top = 0){
        this.left = left;
        this.top = top;
    }

    // 给定一个点（绝对坐标），判断这个点是否在x轴下方
    function isUnder(abs_point) {
        var rel_point = this.getRelativePoint(abs_point);
        if (rel_point.y > 0) {
            return 1;
        }else if(rel_point.y == 0){
            return 0;
        }else{
            return -1;
        }
    }

    function a_test(abs_point){
        Debug.message(12450);
    }

    // 给定一个点（绝对坐标），判断这个点是否在y轴右方
    function isRight(abs_point){
        var rel_point = this.getRelativePoint(abs_point);
        if (rel_point.x > 0) {
            return 1;
        }else if(rel_point.x == 0){
            return 0;
        }else{
            return -1;
        }
    }
    
    // 给定一个绝对坐标点，转换成这个坐标系的相对坐标点
    function getRelativePoint(abs_point){
        return new point(-(this.left - abs_point.x), (this.top - abs_point.y));
    }
    
    // 给定一个相对坐标点，转换成绝对坐标点
    function getAbsolutePoint(rel_point){
        return new point(this.left + rel_point.x, this.top - rel_point.y);
    }
}

// 数学函数类
class mathFunc {
    var m_system;
    function mathFunc(CartesianSystem){
        // 需要传入一个笛卡尔坐标系
        this.m_system = CartesianSystem;
    }
}

// 深蹲运动轨迹类
class rise_down extends mathFunc {
    var _isUp_1 = false;
    var _isDown = false;
    var _isUp_2 = false;
    var count = 0;
    function rise_down(CartesianSystem) {
        super.mathFunc(...);
    }
    function onReceive(body_point, act_bean){
        var nose = body_point[0];
        if(nose.score < 0.3) return;
        var point_nose = new point(nose.x, nose.y);
        var result = this.m_system.isUnder(point_nose);
        if(result == 1) this._isUp_1 = true;
        if(result == -1) this._isDown = true;
        if(this._isUp_1 && this._isDown && result == 1) this._isUp_2 = true;
        if(this._isUp_1 && this._isDown && this._isUp_2) {
            this.count++;
            this._isDown = false;
            this._isUp_2 = false;
            lay.fillRect(0, 0, 500, 500, 0xffffff);
            lay.drawText(0, 0,  this.count , 0);
            //lay.drawText(100, 100, "finish : " + this.count + " count",0);
        }
    }
}

// 跳绳运动轨迹类
class skip_act extends mathFunc {
    var current_nose = void;
    var current_r_eye = void;
    var current_l_eye = void;
    var current_r_ear = void;
    var current_l_ear = void;
    var current_r_shoulder = void;
    var current_l_shoulder = void;
    var current_r_elbow = void;
    var current_l_elbow = void;
    var current_r_hand = void;
    var current_l_hand = void;
    var current_r_ass = void;
    var current_l_ass = void;
    var current_r_knee = void;
    var current_l_knee = void;
    var current_r_foot = void;
    var current_l_foot = void;
    //========================================================
    var _isUp = false;
    var _isDown = false;
    var count = 0;
    function skip_act(CartesianSystem){
        super.mathFunc(...);
    }

    function onReceive(body_point, act_bean){
        // 全身的点
        var nose = body_point[0];
        var r_eye = body_point[1];
        var l_eye = body_point[2];
        var r_ear = body_point[3];
        var l_ear = body_point[4];
        var r_shoulder = body_point[5];
        var l_shoulder = body_point[6];
        var r_elbow = body_point[7];
        var l_elbow = body_point[8];
        var r_hand = body_point[9];
        var l_hand = body_point[10];
        var r_ass = body_point[11];
        var l_ass = body_point[12];
        var r_knee = body_point[13];
        var l_knee = body_point[14];
        var r_foot = body_point[15];
        var l_foot = body_point[16];

        if(nose.score <= 0.3 || r_eye.score <= 0.3 || l_eye.score <= 0.3 || r_ear.score <= 0.3 || l_ear.score <= 0.3 || r_shoulder.score <= 0.3 
            || l_shoulder.score <= 0.3 || r_elbow.score <= 0.3 || l_elbow.score <= 0.3 || r_hand.score <= 0.3 || l_hand.score <= 0.3 || r_ass.score <= 0.3
            || l_ass.score <= 0.3 || r_knee.score <= 0.3 || l_knee.score <= 0.3) return;

        if(current_nose==void) current_nose = nose;
        if(current_r_eye==void) current_r_eye = r_eye;
        if(current_l_eye==void) current_l_eye = l_eye;
        if(current_r_ear==void) current_r_ear = r_ear;
        if(current_l_ear==void) current_l_ear = l_ear;
        if(current_r_shoulder==void) current_r_shoulder = r_shoulder;
        if(current_l_shoulder==void) current_l_shoulder = l_shoulder;
        if(current_r_elbow==void) current_r_elbow = r_elbow;
        if(current_l_elbow==void) current_l_elbow = l_elbow;
        if(current_r_hand==void) current_r_hand = r_hand;
        if(current_l_hand==void) current_l_hand = l_hand;
        if(current_r_ass==void) current_r_ass = r_ass;
        if(current_l_ass==void) current_l_ass = l_ass;
        if(current_r_knee==void) current_r_knee = r_knee;
        if(current_l_knee==void) current_l_knee = l_knee;
        if(current_r_foot==void) current_r_foot = r_foot;
        if(current_l_foot==void) current_l_foot = l_foot;

        // 算法关键：全身的点都在上升时，判断为跳起来，在这个基础上，如果发生了下降，则判断为完成一次起跳
        if(current_nose.y - nose.y < 0 && current_r_eye.y - r_eye.y < 0 && current_l_eye.y - l_eye.y < 0 &&
            current_r_ear.y - r_ear.y < 0 && current_l_ear.y - l_ear.y < 0 && current_r_shoulder.y - r_shoulder.y < 0 &&
            current_l_shoulder.y - l_shoulder.y < 0 && current_r_elbow.y - r_elbow.y < 0 && current_l_elbow.y - l_elbow.y < 0 &&
            current_r_hand.y - r_hand.y < 0 && current_l_hand.y - l_hand.y < 0 && current_r_ass.y - r_ass.y < 0 &&
            current_l_ass.y - l_ass.y < 0 && current_r_knee.y - r_knee.y < 0 && current_l_knee.y - l_knee.y < 0 &&
            current_r_foot.y - r_foot.y < 0 && current_l_foot.y - l_foot.y < 0 && !this._isDown) {
                Debug.message("is up！！！");
                this._isUp = true;
            }

        // 已经跳起来后下降
        if(current_nose.y - nose.y > 0 && current_r_eye.y - r_eye.y > 0 && current_l_eye.y - l_eye.y > 0 &&
            current_r_ear.y - r_ear.y > 0 && current_l_ear.y - l_ear.y > 0 && current_r_shoulder.y - r_shoulder.y > 0 &&
            current_l_shoulder.y - l_shoulder.y > 0 && current_r_elbow.y - r_elbow.y > 0 && current_l_elbow.y - l_elbow.y > 0 &&
            current_r_hand.y - r_hand.y > 0 && current_l_hand.y - l_hand.y > 0 && current_r_ass.y - r_ass.y > 0 &&
            current_l_ass.y - l_ass.y > 0 && current_r_knee.y - r_knee.y > 0 && current_l_knee.y - l_knee.y > 0 &&
            current_r_foot.y - r_foot.y > 0 && current_l_foot.y - l_foot.y > 0 && this._isUp) {
                this._isDown = true;
                Debug.message("finish jump！！！");
                this.count++;
                lay.fillRect(0, 0, 500, 500, 0xffffff);
                lay.drawText(0, 0,  this.count , 0);
                this._isUp = false;
                this._isDown = false;
            }

        current_nose = nose;
        current_r_eye = r_eye;
        current_l_eye = l_eye;
        current_r_ear = r_ear;
        current_l_ear = l_ear;
        current_r_shoulder = r_shoulder;
        current_l_shoulder = l_shoulder;
        current_r_elbow = r_elbow;
        current_l_elbow = l_elbow;
        current_r_hand = r_hand;
        current_l_hand = l_hand;
        current_r_ass = r_ass;
        current_l_ass = l_ass;
        current_r_knee = r_knee;
        current_l_knee = l_knee;
        current_r_foot = r_foot;
        current_l_foot = l_foot;

    }
}