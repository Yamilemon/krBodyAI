// 点类
class point {
    var x = 0;
    var y = 0;
    function point(x = 0, y = 0){
        this.x = x;
        this.y = y;
    }
}

// 笛卡尔坐标系类
class Cartesian {
    // 坐标原点所在的left ，top值
    var left = 0;
    var top = 0;
    function Cartesian(left = 0, top = 0){
        this.left = left;
        this.top = top;
    }

    // 给定一个点（绝对坐标），判断这个点是否在x轴下方
    function isUnder(abs_point) {
        var rel_point = this.getRelativePoint(abs_point);
        if (rel_point.y > 0) {
            return 1;
        }else if(rel_point.y == 0){
            return 0;
        }else{
            return -1;
        }
    }

    function a_test(abs_point){
        Debug.message(12450);
    }

    // 给定一个点（绝对坐标），判断这个点是否在y轴右方
    function isRight(abs_point){
        var rel_point = this.getRelativePoint(abs_point);
        if (rel_point.x > 0) {
            return 1;
        }else if(rel_point.x == 0){
            return 0;
        }else{
            return -1;
        }
    }
    
    // 给定一个绝对坐标点，转换成这个坐标系的相对坐标点
    function getRelativePoint(abs_point){
        return new point(-(this.left - abs_point.x), (this.top - abs_point.y));
    }
    
    // 给定一个相对坐标点，转换成绝对坐标点
    function getAbsolutePoint(rel_point){
        return new point(this.left + rel_point.x, this.top - rel_point.y);
    }
}

// 数学函数类
class mathFunc {
    var m_system;
    function mathFunc(CartesianSystem){
        // 需要传入一个笛卡尔坐标系
        this.m_system = CartesianSystem;
    }
}

// 深蹲运动轨迹类
class rise_down extends mathFunc {
    var _isUp_1 = false;
    var _isDown = false;
    var _isUp_2 = false;
    var count = 0;
    function rise_down(CartesianSystem) {
        super.mathFunc(...);
    }
    function onReceive(body_point, act_bean){
        var nose = body_point[0];
        if(nose.score < 0.3) return;
        var point_nose = new point(nose.x, nose.y);
        var result = this.m_system.isUnder(point_nose);
        if(result == 1) this._isUp_1 = true;
        if(result == -1) this._isDown = true;
        if(this._isUp_1 && this._isDown && result == 1) this._isUp_2 = true;
        if(this._isUp_1 && this._isDown && this._isUp_2) {
            this.count++;
            this._isDown = false;
            this._isUp_2 = false;
            lay.fillRect(0, 0, 500, 500, 0xffffff);
            lay.drawText(0, 0,  this.count , 0);
            //lay.drawText(100, 100, "finish : " + this.count + " count",0);
        }
    }
}